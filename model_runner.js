// Generated by CoffeeScript 1.12.7
(function() {
  var ModelRunner, Models, Point,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Models || (window.Models = {});

  Models = window.Models;
  console.log("window.Models is getting created");

  Models.Point = Point = (function() {
    console.log("class Point is getting created");
    function Point(index, position, runner) {
      this.index = index;
      this.position = position;
      this.runner = runner;
      this.ignition_time = 2e308;
      this.extinguish_time = 2e308;
      this._param_cache = {};
    }

    Point.prototype.is_ignited = function(t0, t1) {
      return this.ignition_time < t1 && this.extinguish_time >= t1;
    };

    Point.prototype.param = function(group_name, parameter) {
      var base, group, val;
      val = ((base = this._param_cache)[group_name] || (base[group_name] = {}))[parameter];
      if (val) {
        return val;
      }
      group = this.runner.parameters[group_name];
      if (group.data) {
        this._array_index || (this._array_index = this.index.y * this.runner.parameters.EXTENTS.x + this.index.x);
        val = group.data[this._array_index];
      }
      if (!val) {
        val = group[parameter];
      }
      if (group.lookup) {
        val || (val = 1);
        val = group.lookup[val];
        if (val) {
          val = val[parameter];
        }
      }
      if (val === -2e308) {
        val = null;
      } else {
        val = parseFloat(val);
      }
      return this._param_cache[group_name][parameter] = val;
    };

    Point.prototype.clean = function() {
      this._param_cache = null;
      return this.runner = null;
    };

    return Point;

  })();

  Models.ModelRunner = ModelRunner = (function() {
    console.log("class ModelRunner is getting created");
    function ModelRunner() {
      this.spread_rate_model = null;
      this.propagation_model = null;
      this.burn_model = null;
      this.grid = null;
      this.t0 = 0;
      this.t_index = 0;
    }

    ModelRunner.prototype.neighbours = function(point) {
      var i, j, n, neighbour, x, y;
      if (point.neighbours) {
        return point.neighbours;
      }
      neighbour = (function(_this) {
        return function(x, y) {
          if (x < 0 || y < 0 || x >= _this.parameters.EXTENTS.x || y >= _this.parameters.EXTENTS.y) {
            return null;
          }
          return _this.grid[y][x];
        };
      })(this);
      point.neighbours = [];
      for (y = i = -1; i <= 1; y = ++i) {
        for (x = j = -1; j <= 1; x = ++j) {
          if (x === 0 && y === 0) {
            continue;
          }
          if (n = neighbour(point.index.x + x, point.index.y + y)) {
            point.neighbours.push(n);
          }
        }
      }
      return point.neighbours;
    };

    ModelRunner.prototype.progress = function(progress_callback) {
      return this.progress_callback = progress_callback;
    };

    ModelRunner.prototype.report_progress = function(message, progress) {
      if (!this.progress_callback) {
        return;
      }
      return this.progress_callback({
        message: message,
        progress: progress
      });
    };

    ModelRunner.prototype.init = function() {
      var x, y;
      this.report_progress("Initialising model", 0);
      this.report_progress("Initialising grid", 0);
      return this.grid = (function() {
        var i, ref, results;
        results = [];
        for (y = i = 0, ref = this.parameters.EXTENTS.y - 1; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (x = j = 0, ref1 = this.parameters.EXTENTS.x - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
              results1.push(new Point({
                x: x,
                y: y
              }, {
                x: x * this.parameters.RESOLUTION.x,
                y: y * this.parameters.RESOLUTION.y,
                z: 0.0
              }, this));
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
    };

    ModelRunner.prototype.step = function() {
      var arrival_time, from_point, i, ignited, j, k, l, len, m, neighbour, o, p, point, progress, ref, ref1, ref2, ref3, ref4, ref5, ref6, t1, to_point, to_points, to_points_processed, x, y;
      t1 = this.t0 + this.parameters.RESOLUTION.t;
      progress = 100.0 * this.t_index / this.parameters.SIMULATION.steps;
      this.report_progress("Step " + this.t_index + " - starting calculation for time " + this.t0, progress);
      this.report_progress("Step " + this.t_index + " - Calculating spread rate", progress);
      if (this.t_index === 0) {
        for (y = i = 0, ref = this.parameters.EXTENTS.y - 1; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
          for (x = j = 0, ref1 = this.parameters.EXTENTS.x - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
            this.spread_rate_model.calculate_spread_rate(this.grid[y][x], this.t0, this.t0 + this.parameters.RESOLUTION.t);
          }
        }
      }
      this.report_progress("Step " + this.t_index + " - Propagating fire", progress);
      ignited = [];
      for (y = k = 0, ref2 = this.parameters.EXTENTS.y - 1; 0 <= ref2 ? k <= ref2 : k >= ref2; y = 0 <= ref2 ? ++k : --k) {
        for (x = l = 0, ref3 = this.parameters.EXTENTS.x - 1; 0 <= ref3 ? l <= ref3 : l >= ref3; x = 0 <= ref3 ? ++l : --l) {
          from_point = this.grid[y][x];
          if (from_point.is_ignited(this.t0, t1)) {
            ignited.push(from_point);
          }
        }
      }
      while (ignited.length > 0) {
        from_point = ignited.shift();
        if (this.neighbours(from_point).every(function(neighbour) {
          return neighbour.ignition_time < this.t0;
        })) {
          continue;
        }
        to_points = this.neighbours(from_point);
        to_points_processed = [];
        while (to_points.length > 0) {
          to_point = to_points.shift();
          to_points_processed.push(to_point);
          if (to_point.ignition_time < this.t0) {
            continue;
          }
          if (Math.sqrt(Math.pow(to_point.index.x - from_point.index.x, 2) + Math.pow(to_point.index.y - from_point.index.y, 2)) > 10) {
            continue;
          }
          arrival_time = this.propagation_model.calculate_arrival_time(from_point, to_point, this.t0, t1, this.parameters.TOPOGRAPHY['flat']);
          if (arrival_time < to_point.ignition_time) {
            to_point.ignition_time = arrival_time;
            if (arrival_time < t1) {
              if (indexOf.call(ignited, to_point) < 0) {
                ignited.push(to_point);
              }
              ref4 = this.neighbours(to_point);
              for (m = 0, len = ref4.length; m < len; m++) {
                neighbour = ref4[m];
                if (!(neighbour.is_ignited(this.t0, t1) || (indexOf.call(to_points, neighbour) >= 0) || (indexOf.call(to_points_processed, neighbour) >= 0))) {
                  to_points.push(neighbour);
                }
              }
            }
          }
        }
      }
      this.report_progress("Step " + this.t_index + " - Simulating burn", progress);
      for (y = o = 0, ref5 = this.parameters.EXTENTS.y - 1; 0 <= ref5 ? o <= ref5 : o >= ref5; y = 0 <= ref5 ? ++o : --o) {
        for (x = p = 0, ref6 = this.parameters.EXTENTS.x - 1; 0 <= ref6 ? p <= ref6 : p >= ref6; x = 0 <= ref6 ? ++p : --p) {
          point = this.grid[y][x];
          if (!point.is_ignited(this.t0, t1)) {
            continue;
          }
          this.burn_model.simulate_burn(point, this.t0, t1, this.parameters.RESOLUTION.t);
        }
      }
      this.t0 = t1;
      this.t_index += 1;
      return this.report_progress("Time step " + this.t_index + " for time " + this.t0 + " complete", progress);
    };

    return ModelRunner;

  })();
  console.log("End of File model_runner.js");

}).call(this);
console.log("Very End of File model_runner.js");
